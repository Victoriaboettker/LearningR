---
title: "Reproducible documents"
author: "Victoria Bøttker"
format: html
editor: visual
---

```{r setup}
#| message: false
#| warning: false
library(tidyverse)
post_meal_data <- read_csv2(here::here("data/post-meal-insulin.csv"))

small_post_meal_data <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)

tidier_post_meal_data <- small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)
tidier_post_meal_data

tidied_post_meal_data <- tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```

## About me

-   Victoria Bøttker

-   Stud.med, Researh Year Student

-   Aarhus University

-   Aarhus University hospital, The department of Gynecology and Obstetrics

I am a 25-year-old **medical** student doing a research year at the department of Gynecology and obstetrics. The research is about threatened *preterm birth*.

## Simple code

```{r}
3*3
```

## Testing for Git

The weather is medium. Not sunny, not rainy - but cloudy.

## Showing the data

```{r}
post_meal_data

```

```{r}
glimpse(post_meal_data)
```

## Plot one continous variable

```{r}
#| fig-cap: "Distribution of BMI."
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) + 
  geom_histogram()
```

## Exercise: discrete plots

```{r}
#| fig-cap: "Group status after a meal."
#| label: fig-group-bar
ggplot(post_meal_data, aes(x = Group)) + 
  geom_bar()

```

@fig-group-bar

```{r}
#| fig-cap: "Distribution of glykemi."
#| label: fig-glykemi-bar
ggplot(post_meal_data, aes(x = glykemi)) + 
  geom_bar()
```

@fig-glykemi-bar

## Plotting two discrete variables

```{r}
ggplot(post_meal_data, aes(x = Group, fill = as.character(glykemi)))+
  geom_bar(position = position_dodge())
```

## Side by side plots

```{r}
ggplot(post_meal_data, aes(x = BMI)) + 
  geom_histogram()
```

```{r}
ggplot(post_meal_data, aes(x = glykemi)) + 
  geom_bar()
```

## Plotting two continuous variables

```{r side-by-side-figs}
#| label: fig-bmi-glycemia
#| fig-cap: "BMI and glycemia, side by side."
#| fig-subcap:
#|   - "Distribution of BMI."
#|   - "Number of those with glycemia."
#| layout-ncol: 2
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()

```

## Selecting data

```{r}
select(post_meal_data, Age)
select(post_meal_data, Age, BMI, Weight)
select(post_meal_data, -Group)
```

## Select helpers

```{r}
select(post_meal_data, starts_with("PG"))
```

```{r}
select(post_meal_data, ends_with("DXA"))
```

```{r}
# All columns containing the number "0"
select(post_meal_data, contains("0"))
```

## Renaming columns

```{r}
small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  )
```

## 

```{r}
# Task 1.
post_meal_data |>
  select(contains("OGTT"))

# Task 2.
post_meal_data |>
  select(contains(".."), -contains("...")) 

# Task 3.
post_meal_data |>
 rename(
    P.Glucose.minus5.OGTT = P.Glucose..5.OGTT,
    Insulin.minus5.OGTT.X = Insulin..5.OGTT.X
  )

# Task 4.
post_meal_data |>
  select(id, BMI, Length, Weight, Age) |>
  rename(Height = Length)
```

## Filtering data

```{r}
small_post_meal_data |>
  filter(glykemi == 1)

```

This code could be read as:

Take the post_meal_data dataset and then filter sp that only rows where glykemi is equal to 1 are kept.

When a row in the glykemi column has the value 1, that row is kept. Otherwise, it is dropped.

Let's see how many people are above "overweight" (BMi of 25) category, which we would use \<= for.

```{r}
small_post_meal_data |>
  filter(BMI >= 25)
```

Let's see how many are in the "CTR" group again:

```{r}
small_post_meal_data |>
  filter(Group == "CTR")
```

```{r}
small_post_meal_data |>
  filter(Group == "CTR", BMI >= 25)
```

When we use , to separate our logic conditions in filter (), it interprets that as using an &. Looks like most of the people who are overweight are in the control group. Lets replace the , with an \| to see how many people are in the control group OR have a BMI of 25 or more.

```{r}
small_post_meal_data |>
  filter(Group == "CTR" | BMI >= 25)
```

This lists both people who are in the control as well as anyone who is overweight.

```{r}
tidier_post_meal_data
```

## Modifying columns

```{r}
tidier_post_meal_data |>
  mutate(insulin_glucose_ratio = auc_insulin / auc_glucose)
```

```{r}
tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```

```{r}
tidied_post_meal_data
```

## Practice with filter and mutate

1.  Use [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) to find how many participants have a BMI of more than or equal to 25 *and* less than or equal to 40, *and* are in the “FDR” `Group`. How many are there?

2.  Create a `percent_body_fat` column with [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) by dividing the `Fat.mass.DXA` by the `Weight`, then multiplying by 100. *Hint*: In R, use `*` to multiply and `/` to divide. Then pipe to [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) to find out how many participants have a `percent_body_fat` greater than 30.

```{r}
# Task 1.
post_meal_data |>
  filter(BMI >= 25 & BMI <= 40 & Group == "FDR")

# Task 2.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100
  ) |> 
  filter(percent_body_fat > 30)
```

## Geoms notes

-   [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html), which makes boxplots that show the median and a measure of range in the data. Boxplots are generally pretty good at showing the spread of data. However, like the reading task about “bar plots”, boxplots can still hide your actual data. It is generally fine to use, but a better geom might be jitter or violin.

-   [`geom_jitter()`](https://ggplot2.tidyverse.org/reference/geom_jitter.html), which makes a type of scatterplot, but for discrete and continuous variables. A useful argument to [`geom_jitter()`](https://ggplot2.tidyverse.org/reference/geom_jitter.html) is `width`, which controls how wide the jittered points span from the center line. This plot is much better than the boxplot since it shows the *actual data*, and not summaries like a boxplot does. However, it is not very good when you have lots of data points.

-   [`geom_violin()`](https://ggplot2.tidyverse.org/reference/geom_violin.html), which shows a density distribution like [`geom_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html). This geom is great when there is a lot of data and [`geom_jitter()`](https://ggplot2.tidyverse.org/reference/geom_jitter.html) may otherwise appear as a mass of dots.

## Visualizing with a jitter plot

We'll use jitter because the data are quite small. But the way you use geoms is the same.

```{r}
tidied_post_meal_data |>
  mutate(overweight = if_else(BMI >= 25, "Overweight", "Not overweight")) |>
  ggplot(aes(x = overweight, y = insulin_glucose_ratio)) +
  geom_jitter()
```

## Plotting three or more variables

```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  ggplot(aes(x = Age, y = auc_insulin, colour = Group)) +
  geom_point()
```

```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  mutate(young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(cols = vars(young))
```

```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  mutate(young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(rows = vars(young))
```

Der er tilføjet titler på hhv. X og Y aksen, ved at bruge labs (x = , y= )

For at gemme et plot kan man bruge ggsave() function

```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  mutate(young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(rows = vars(young)) +
  labs(
    x = "Body mass index (BMI)",
    y = "Insulin to glucose ratio"
  )
```

## Make multi-dimensional plots! 

1.  Show the distribution of `percent_body_fat` by `Group` and `Age` category following these steps:

    1.  Create a new column called `percent_body_fat` that calculates the percentage of body fat by dividing `Fat.mass.DXA` by `Weight` and multiplying by 100. You wrote this code previously in another exercise, you can re-use that code if you would like.

    2.  Create a new column called `young` that groups people into two categories of being above (`"Old"`) or below (`"Young"`) 40 years of age by using [`if_else()`](https://dplyr.tidyverse.org/reference/if_else.html).

    3.  Use [`ggplot()`](https://ggplot2.tidyverse.org/reference/ggplot.html) and [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) to create the plot by putting `Group` on the x-axis, `percent_body_fat` on the y-axis, and colour the points by `young`. Use [`geom_jitter()`](https://ggplot2.tidyverse.org/reference/geom_jitter.html) to show the data points. The argument `width = 0.2` has already been set for you to have the points cluster together a bit more

2.  Show the relationship between BMI and bone mineral density, splitting it by insulin sensitivity by following these steps:

    1.  A new column called `insulin_glucose_ratio` has already been included in the template for you to use. Below this code, create a new column called `insulin_insensitive` that groups people into two categories of being above (`"Insensitive"`) or below (`"Sensitive"`) the [`mean()`](https://rdrr.io/r/base/mean.html) of `insulin_glucose_ratio` by using [`if_else()`](https://dplyr.tidyverse.org/reference/if_else.html).

    2.  Use [`ggplot()`](https://ggplot2.tidyverse.org/reference/ggplot.html) and [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) to create the plot by putting `BMI` on the x-axis, `Bone.mineral.DXA` on the y-axis, and colour the points by `insulin_insensitive`.

    3.  Use [`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) to show the data points, then also use [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) to show a line of best fit.

    4.  Use [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) to split the plot by `insulin_insensitive`.

```{r}
#| label: fig-multidimensional
#| fig-cap: "Two, mult-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2
# Task 1.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100,
    young = if_else(Age < 40, "Young", "old")
  ) |>
  ggplot(aes(x = Group, y = percent_body_fat, colour = young)) +
  geom_jitter(width = 0.2)

# Task 2.
post_meal_data |>
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) |>
  ggplot(aes(x = BMI, y = Bone.mineral.DXA)) +
  geom_point() +
  geom_smooth() +
  facet_grid(cols = vars(insulin_insensitive))
```

## Changing colours 

```{r}
post_meal_data |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d()
# scale_fill_viridis_d(option = "magma")

# Tasks 3. and 4.
post_meal_data |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  scale_colour_viridis_c()
# scale_colour_viridis_c(option = "inferno")
```

-   Pipe `|>` the output of your wrangling directly into making a plot to streamline your code.

<!-- -->

-   Use [`geom_jitter()`](https://ggplot2.tidyverse.org/reference/geom_jitter.html), [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html), or [`geom_violin()`](https://ggplot2.tidyverse.org/reference/geom_violin.html) to show the relationship between a continuous and a discrete variable.

-   To plot more dimensions, use colour, the X axis, the Y axis, or [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html).

-   Use colour blind-friendly palettes, such as [viridis](https://sjmgarnier.github.io/viridis/).

## Calculating summary statistics

Using summarise() witout usind group_by().

```{r}
tidied_post_meal_data |>
  summarise(max_bmi = max(BMI))
```

We now see the max value BMI in the data.

Sometimes, if there are missing values in your data, you might get `NA` as a result, which means “missing”. In R, `NA` values “propagate”, meaning that if there is one value missing, then the max or mean value will also be missing. When this happens, we need to tell [`max()`](https://rdrr.io/r/base/Extremes.html) to exclude any `NA` values from the calculation by using the argument `na.rm = TRUE`.

```{r}
tidied_post_meal_data |>
  summarise(
    max_bmi = max(BMI),
    min_bmi = min(BMI)
  )
```

## Summarise with group by 

```{r}
tidied_post_meal_data |>
  group_by(Group) |>
  summarise(
    mean_age = mean(Age),
    mean_bmi = mean(BMI)
  )
```

```{r}
tidied_post_meal_data |>
  group_by(Group) |>
  summarise(
    mean_age = mean(Age),
    mean_bmi = mean(BMI)
  ) |>
  ungroup()
```
